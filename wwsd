#!/usr/bin/env python3
'''
wwsd

Sets system wallpaper depending on user-configurable 
rules. See github for more information: 
    https://github.com/cbosoft/wwsd-git

Minimal startup: create/edit ~/.config/wwsd/config.json
as per your needs, then add "exec wwsd" to your i3 
config file.

Usage:
  wwsd (-h | --help)
  wwsd (--begin | --restart) [--config=<config>] [--dont-fork]
  wwsd --generate-config [--config=<config>] 
  wwsd --kill-fork

Options:
  -h --help                      Show this message
  -b --begin                     Start the watcher process
  -r --restart                   Kills any previous forked processes, starts new watcher
  -c --config=<config>           Override default config file
  -g --generate-config           Generates a new config file
  -k --kill-fork                 Kills forked process
  -d --dont-fork                 Does not fork to new process
'''

from docopt import docopt
from pathlib import Path
import json
import subprocess as sp
from time import sleep
import os
import i3ipc

old_i3dat = None
old_wallpapers = None
wsconfig = None
disp_idx = None
fg = False

def dosh(shc):
    pr = sp.Popen(shc, shell = True, stdout = sp.PIPE)
    pr.wait()
    ret = pr.stdout.read().decode("utf-8")
    return ret


def get_i3_data():
    return json.loads(dosh("i3-msg -t get_workspaces"))


def get_vis_ws(i3dat):
    ov = list()
    for wsdict in i3dat:
        if wsdict['visible']:
            ov.append(wsdict)
    return ov

def write_nitrogen_conf(home, displays, wallpapers):
    with open(f"{home}/.config/nitrogen/bg-saved.cfg", "w") as nitrocfg:
        for disp, wall in zip(displays, wallpapers):
            nitrocfg.write(f"[xin_{disp}]\n")
            nitrocfg.write(f"file={os.path.expanduser(wall)}\n")
            nitrocfg.write("mode=5\n")
            nitrocfg.write("bgcolor=#000000\n\n")
    return


def get_display_indices():
    rv = dosh("xrandr -q").split('\n')[1:]
    displays = dict()
    c = 0
    for line in rv:
        if line == '': continue
        if line[0] == " ": continue
        if "disconnected" in line: continue
        displays[line.split(' ')[0]] = c
        c += 1
    return displays


def generate_config(configfile):
    df = {'rules' : { }, 'default' : '~/a/path/to/a/default/wallpaper.jpg'}
    with open(configfile, "w") as conffile:
        json.dump(df, conffile, indent=2)
    return df


def kill_fork():
    
    python_processes = dosh("pgrep python").split('\n')[:-1]
    wwsd_processes = dosh("pgrep -f wwsd").split('\n')[:-1]

    print("Killing WWSd processes.")
    thispid = os.getpid()
    processes_killed = 0
    for wpid in wwsd_processes:
        if wpid in python_processes and thispid != int(wpid):
            rv = dosh(f"kill {wpid}")
            if rv != '':
                print(rv)
            processes_killed += 1
    if processes_killed == 0:
        print(">> No wwsd process exists!")
    else:
        print(f">> {processes_killed} processes killed.")


def setup():
    global wsconfig
    global disp_idx
    global fg
    
    try:
        with open(configfile) as confjson:
            wsconfig = json.load(confjson)
    except FileNotFoundError:
        print(f"\nConfig file \"{configfile}\" could not be found.")
        print("Use")
        print("    wwsd --generate-config")
        print("to generate a configfile")
        exit(-1)

    print(f"WWSd started, with config file \"{configfile}\"")
    
    try:
        disp_idx = wsconfig['display_indexing']
    except KeyError:
        disp_idx = get_display_indices()
        
    if args['--dont-fork']:
        fg = True
        print(">> Process will not be forked. Ctrl-C to quit.")
    else:
        fg = False
        pid = os.fork()
        if pid != 0:
            print(f">> Process has been forked. PID={pid}")
            exit(0)

def main(i3, e):
    global old_i3dat
    global old_wallpapers
    global wsconfig
    global disp_idx
    global fg
    
    i3dat = get_vis_ws(get_i3_data())
    if i3dat == old_i3dat: return
    else:  old_i3dat = i3dat

    displays = list()
    wallpapers = [wsconfig['default'] for __ in range(len(i3dat))]

    for i, visible_workspace in enumerate(i3dat):
        displays.append(disp_idx[visible_workspace['output']])

        for rule, value, wallpaper in wsconfig['rules']:
            if visible_workspace[rule] == value:
                wallpapers[i] = wallpaper
                if fg: print(f"Wallpaper set to \"{wallpaper}\" because of {rule}: {visible_workspace[rule]}")
                break
        
    if old_wallpapers != wallpapers:
        write_nitrogen_conf(homedir, displays, wallpapers)
        dosh('nitrogen --restore')
        old_wallpapers = wallpapers
    return
        


if __name__ == "__main__":

    args = docopt(__doc__, version="")
    homedir = str(Path.home())
    configfile = f"{homedir}/.config/wwsd/config.json" if not args['--config'] else args['--config']
    exitafterkill = True
    
    if args['--restart']:
        args['--kill-fork'] = True
        exitafterkill = False
        args['--begin'] = True
    
    if args['--kill-fork']:
        kill_fork()
        if exitafterkill: exit(0)
        
    if args['--begin']:
        
        setup()
        
        i3 = i3ipc.Connection()
        i3.on('workspace::focus', main)
                
        try: i3.main()        
        except KeyboardInterrupt: pass
        
    elif args['--generate-config']:
        generate_config(configfile)
        exit(0)
